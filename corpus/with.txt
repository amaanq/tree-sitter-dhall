==================
Basic with statement
==================

{ a = 1 } with a = 2

---

(expression
  (with_expression
    (primitive_expression (record_literal
      (record_literal_entry (label) (assign_operator)
        (expression (primitive_expression
          (numeric_literal (natural_literal)))))))
    (with_operator)
    (label)
    (assign_operator)
    (primitive_expression (numeric_literal (natural_literal)))))

==================
Chained with statements
==================

{ a.b = 1, c.d = 2 } with a.b = 3 with c.e = 4

---

(expression
  (with_expression
    (with_expression
      (primitive_expression (record_literal
        (record_literal_entry
          (label) (selector (selector_dot) (label))
          (assign_operator)
          (expression (primitive_expression
            (numeric_literal (natural_literal)))))
        (record_literal_entry
          (label) (selector (selector_dot) (label))
          (assign_operator)
          (expression (primitive_expression
            (numeric_literal (natural_literal)))))))
      (with_operator)
      (label) (selector (selector_dot) (label))
      (assign_operator)
      (primitive_expression (numeric_literal (natural_literal))))
    (with_operator)
    (label) (selector (selector_dot) (label))
    (assign_operator)
    (primitive_expression (numeric_literal (natural_literal)))))

==================
Chained with statement precedence
==================

{ a = Some 1 } with a = Some 2 with a = Some 3

---

(expression
  (with_expression
    (with_expression
      (primitive_expression (record_literal
        (record_literal_entry (label) (assign_operator)
          (expression (application_expression
            (some)
            (primitive_expression
              (numeric_literal (natural_literal))))))))
      (with_operator)
      (label)
      (assign_operator)
      (application_expression
        (some)
        (primitive_expression (numeric_literal (natural_literal)))))
    (with_operator)
    (label)
    (assign_operator)
    (application_expression
      (some)
      (primitive_expression (numeric_literal (natural_literal))))))

==================
With statement operator precedence
==================

{ x = 0 } with x = 1 + 1

---

(expression
  (with_expression
    (primitive_expression (record_literal
      (record_literal_entry
        (label)
        (assign_operator)
        (expression (primitive_expression
          (numeric_literal (natural_literal)))))))
    (with_operator)
    (label)
    (assign_operator)
    (plus_expression
      (primitive_expression (numeric_literal (natural_literal)))
      (infix_operator)
      (primitive_expression (numeric_literal (natural_literal))))))

==================
With statement completion precedence
==================

foo::{ x = 0 } with x = 1

---

(expression
  (with_expression
    (completion
      type: (primitive_expression (identifier (label)))
      (completion_operator)
      (primitive_expression
        (record_literal
          (record_literal_entry
            (label)
            (assign_operator)
            (expression (primitive_expression
              (numeric_literal (natural_literal))))))))
    (with_operator)
    (label)
    (assign_operator)
    (primitive_expression (numeric_literal (natural_literal)))))

==================
With statement using Some
==================

{ Some = 0 } with Some = 1

---

(expression
  (with_expression
    (primitive_expression (record_literal
      (record_literal_entry
        (label)
        (assign_operator)
        (expression (primitive_expression
          (numeric_literal (natural_literal)))))))
    (with_operator)
    (label)
    (assign_operator)
    (primitive_expression (numeric_literal (natural_literal)))))

==================
With statement question mark
==================

(Some 0) with ? = 1

---

(expression
  (with_expression
    (primitive_expression (expression (application_expression
      (some)
      (primitive_expression (numeric_literal (natural_literal))))))
    (with_operator)
    (question_mark)
    (assign_operator)
    (primitive_expression (numeric_literal (natural_literal)))))
