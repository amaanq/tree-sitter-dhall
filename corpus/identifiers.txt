==================
Builtins (builtinsA.dhall*)
==================

[ Natural/fold
, Natural/build
, Natural/isZero
, Natural/even
, Natural/odd
, Natural/toInteger
, Natural/show
, Integer/toDouble
, Integer/show
, Integer/negate
, Integer/clamp
, Natural/subtract
, Double/show
, List/build
, List/fold
, List/length
, List/head
, List/last
, List/indexed
, List/reverse
, Text/show
, Text/replace
, Bool
, True
, False
, Optional
, None
, Natural
, Integer
, Double
, Text
, Date
, Time
, TimeZone
, List
, Type
, Kind
, Sort
]

---

(expression
  (primitive_expression (list_literal
    (expression (primitive_expression (identifier (builtin))))
    (expression (primitive_expression (identifier (builtin))))
    (expression (primitive_expression (identifier (builtin))))
    (expression (primitive_expression (identifier (builtin))))
    (expression (primitive_expression (identifier (builtin))))
    (expression (primitive_expression (identifier (builtin))))
    (expression (primitive_expression (identifier (builtin))))
    (expression (primitive_expression (identifier (builtin))))
    (expression (primitive_expression (identifier (builtin))))
    (expression (primitive_expression (identifier (builtin))))
    (expression (primitive_expression (identifier (builtin))))
    (expression (primitive_expression (identifier (builtin))))
    (expression (primitive_expression (identifier (builtin))))
    (expression (primitive_expression (identifier (builtin))))
    (expression (primitive_expression (identifier (builtin))))
    (expression (primitive_expression (identifier (builtin))))
    (expression (primitive_expression (identifier (builtin))))
    (expression (primitive_expression (identifier (builtin))))
    (expression (primitive_expression (identifier (builtin))))
    (expression (primitive_expression (identifier (builtin))))
    (expression (primitive_expression (identifier (builtin))))
    (expression (primitive_expression (identifier (builtin))))
    (expression (primitive_expression (identifier (builtin))))
    (expression (primitive_expression (identifier (builtin))))
    (expression (primitive_expression (identifier (builtin))))
    (expression (primitive_expression (identifier (builtin))))
    (expression (primitive_expression (identifier (builtin))))
    (expression (primitive_expression (identifier (builtin))))
    (expression (primitive_expression (identifier (builtin))))
    (expression (primitive_expression (identifier (builtin))))
    (expression (primitive_expression (identifier (builtin))))
    (expression (primitive_expression (identifier (builtin))))
    (expression (primitive_expression (identifier (builtin))))
    (expression (primitive_expression (identifier (builtin))))
    (expression (primitive_expression (identifier (builtin))))
    (expression (primitive_expression (identifier (builtin))))
    (expression (primitive_expression (identifier (builtin))))
    (expression (primitive_expression (identifier (builtin)))))))

==================
Labels are alphanumeric (labelA.dhall)
==================

let _ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-/ = 1
in  _ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-/

---

(expression
  (let_expression
    (let_binding (label) (assign_operator)
      (expression (primitive_expression
        (numeric_literal (natural_literal)))))
    (expression (primitive_expression (identifier (label))))))

==================
Labels can contain reserved keywords (missingFooA.dhall)
==================

missingFoo

---

(expression
  (primitive_expression (identifier (label))))

==================
de Bruijn indices
==================

x == x@0

---

(expression
  (equal_expression
    (primitive_expression (identifier (label)))
    (infix_operator)
    (primitive_expression (identifier
      (label) (de_bruijn_index (natural_literal))))))

==================
de Bruijn indices don't apply to builtins
==================

Bool@0

---

(expression
  (application_expression
    (primitive_expression (identifier (builtin)))
    (ERROR)
    (primitive_expression (numeric_literal (natural_literal)))))

==================
Using a de Bruijn index in another expression (identifierA.dhall)
==================

λ(a : Type) → λ(a : Type) → a@1

---

(expression
  (lambda_expression
    (lambda_operator)
    label: (label)
    (type_operator)
    type: (expression (primitive_expression (identifier (builtin))))
    (arrow_operator)
    expression: (expression (lambda_expression
      (lambda_operator)
      label: (label)
      (type_operator)
      type: (expression (primitive_expression (identifier (builtin))))
      (arrow_operator)
      expression: (expression (primitive_expression
        (identifier (label) (de_bruijn_index (natural_literal)))))))))
