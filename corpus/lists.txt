==================
Annotated non-empty list
==================

[x, y] : List T

---

(expression
  (primitive_expression
    (list_literal
      (expression (primitive_expression (identifier (label))))
      (expression (primitive_expression (identifier (label))))))
  (type_operator)
  type: (expression (application_expression
    (primitive_expression (identifier (builtin)))
    (primitive_expression (identifier (label))))))

==================
Multi-line lists
==================

[ [
    1,
    2,
    3,
  ]
, [
  , 1
  , 2
  , 3
  ]
]

---

(expression (primitive_expression
  (list_literal
    (expression (primitive_expression
      (list_literal
        (expression (primitive_expression
          (numeric_literal (natural_literal))))
        (expression (primitive_expression
          (numeric_literal (natural_literal))))
        (expression (primitive_expression
          (numeric_literal (natural_literal)))))))
    (expression (primitive_expression
      (list_literal
        (expression (primitive_expression
          (numeric_literal (natural_literal))))
        (expression (primitive_expression
          (numeric_literal (natural_literal))))
        (expression (primitive_expression
          (numeric_literal (natural_literal))))))))))

==================
Comments in lists
==================

[
  1, -- item one
{- foo -} 2, 3 ]

---

(expression (primitive_expression
  (list_literal
    (expression (primitive_expression
      (numeric_literal (natural_literal))))
    (line_comment (line_comment_prefix) (line_comment_content))
    (block_comment
      (block_comment_open)
      (block_comment_content)
      (block_comment_close))
    (expression (primitive_expression
      (numeric_literal (natural_literal))))
    (expression (primitive_expression
      (numeric_literal (natural_literal)))))))

==================
Empty list
==================

[] : List T

---

(expression
  (primitive_expression (list_literal))
  (type_operator)
  type: (expression (application_expression
    (primitive_expression (identifier (builtin)))
    (primitive_expression (identifier (label))))))

==================
Empty list with a pre-defined type
==================

[] : T

---

(expression
  (primitive_expression (list_literal))
  (type_operator)
  type: (expression (primitive_expression (identifier (label)))))

==================
Empty list with a comma
==================

[ , ] : List Bool

---

(expression
  (primitive_expression (list_literal))
  (type_operator)
  type: (expression (application_expression
    (primitive_expression (identifier (builtin)))
    (primitive_expression (identifier (builtin))))))

==================
Empty list type operator precedence
==================

[] : List T U

---

(expression
  (primitive_expression (list_literal))
  (type_operator)
  type: (expression (application_expression
    (primitive_expression (identifier (builtin)))
    (primitive_expression (identifier (label)))
    (primitive_expression (identifier (label))))))

==================
Complex list
==================

[ [+1, +2, +3]
, [+1, +2, +3] : List Integer
, [] : List Integer
]

---

(expression
  (primitive_expression (list_literal
    (expression
      (primitive_expression
        (list_literal
          (expression (primitive_expression
            (numeric_literal (integer_literal))))
          (expression (primitive_expression
            (numeric_literal (integer_literal))))
          (expression (primitive_expression
            (numeric_literal (integer_literal)))))))
    (expression
      (primitive_expression
        (list_literal
          (expression (primitive_expression
            (numeric_literal (integer_literal))))
          (expression (primitive_expression
            (numeric_literal (integer_literal))))
          (expression (primitive_expression
            (numeric_literal (integer_literal))))))
      (type_operator)
      type: (expression (application_expression
        (primitive_expression (identifier (builtin)))
        (primitive_expression (identifier (builtin))))))
    (expression
      (primitive_expression (list_literal))
      (type_operator)
      type: (expression (application_expression
        (primitive_expression (identifier (builtin)))
        (primitive_expression (identifier (builtin)))))))))
